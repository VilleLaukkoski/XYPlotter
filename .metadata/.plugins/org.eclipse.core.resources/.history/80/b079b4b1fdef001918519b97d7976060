/*
 ===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
 ===============================================================================
 */

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif
#include <cr_section_macros.h>
#include <vector>
#include "DigitalIoPin.h"
#include "Fmutex.h"
#include "Motor.h"
#include "swm_15xx.h"
// TODO: insert other include files here

// TODO: insert other definitions and declarations here
#include "FreeRTOS.h"
#include "task.h"
#include <string>
#include "Parser.h"
using namespace std;
SemaphoreHandle_t xMotorStop = 0;
SemaphoreHandle_t yMotorStop = 0;
//void parser(string line);
//float* getSpot(float curX, float curY, float X, float Y);
void sendData(vector<string> lineParts);
volatile uint32_t RIT_count;
xSemaphoreHandle sbRIT;
SemaphoreHandle_t goDone;

int LastY = 0;
int LastX = 0;
int fDutyCycl = 1500;

Motor *X;
Motor *Y;
Parser parser;

bool calibrate() {
    int steps = 0;
	int cali = 0;
	bool caliStart = false;
	bool dire = true;
	int stepList = 0;
	while (cali < 2) {
		while (!X->limitSwitch1.read() && !X->limitSwitch2.read()) ;
			X->move(dire);
			steps++;

		if (!X->limitSwitch1.read() || !X->limitSwitch2.read()) {
			if (caliStart) {
				stepList = stepList + steps;
				steps = 0;
				cali++;
			} else {
				caliStart = true;
				steps = 0;
			}
			if (dire) dire = false;
			else dire = true;

			while (!X->limitSwitch1.read() || !X->limitSwitch2.read()) {
				X->move(dire);
				stepList--;
			}
		}
	}
	stepList = stepList / 2;
	X->steps = stepList;

	for (int i = 0;i < (X->steps/2);i++){
			X->move(dire);
		}

	steps = 0;
	cali = 0;
	caliStart = false;
	dire = true;
	stepList = 0;
	while (cali < 2) {
		while (!Y->limitSwitch1.read() && !Y->limitSwitch2.read());

			Y->move(dire);
			steps++;

		if (!Y->limitSwitch1.read() || !Y->limitSwitch2.read()) {
			if (caliStart) {
				stepList = stepList + steps;
				steps = 0;
				cali++;
			} else {
				caliStart = true;
				steps = 0;
			}
			if (dire) dire = false;
			else dire = true;

			while (!Y->limitSwitch1.read() || !Y->limitSwitch2.read()) {
				Y->move(dire);
				stepList--;
			}
		}
	}
	stepList = stepList / 2;
	Y->steps = stepList;
	for (int i = 0;i < (Y->steps/2);i++){
			Y->move(dire);
		}
	Y->calibrated = true;
	X->calibrated = true;
	return true;
}

int sign(int x) {
	if (x > 0)
		return 1;

	else if (x < 0)
		return -1;

	else
		return 0;
}

void bres(int sdx, int sdy) {
	int dx = abs(sdx);
	int dy = abs(sdy);
	int swap = 0;
	int temp;
	int s1 = sign(sdx);
	int s2 = sign(sdy);
	int i = 0;
	int size;

	if (dy >= dx) {
		size = dy;
	} else {
		size = dx;
	}

	int iTabX = 0;
	int iTabY = 0;

	if (dy >= dx) {
		temp = dy;
		swap = 1;
	} else {
		temp = dx;
	}
	while (temp > 0) {
			iTabX = s1;
			iTabY = s2;
			if (dx > 0) {
				if (iTabX != 0) {
					X->move(iTabX == 1);
				}
				dx--;
			}
			if (dy > 0) {
				if (iTabY != 0) {
					Y->move(iTabY == 1);
				}
				dy--;
			}
		temp--;
	}
}
extern "C" {
void RIT_IRQHandler(void)
{
 // This used to check if a context switch is required
 portBASE_TYPE xHigherPriorityWoken = pdFALSE;
 // Tell timer that we have processed the interrupt.
 // Timer then removes the IRQ until next match occurs
 Chip_RIT_ClearIntStatus(LPC_RITIMER); // clear IRQ flag
 if(RIT_count > 0) {
 RIT_count--;

 //implementation of curve
 	 if (RIT_count % 2 == 0) {
 			X->stop(direction);
 			Y->stop(direction);
 		} else {
 			X->move(direction);
 			Y->move(direction);
 		}
 }
 else {
 Chip_RIT_Disable(LPC_RITIMER); // disable timer
 // Give semaphore and set context switch flag if a higher priority task was woken up
 xSemaphoreGive(goDone);
 xSemaphoreGiveFromISR(sbRIT, &xHigherPriorityWoken);
 }
 // End the ISR and (possibly) do a context switch
 portEND_SWITCHING_ISR(xHigherPriorityWoken);
}
}
void RIT_start(int count, int us)
{
 uint64_t cmp_value;
 // Determine approximate compare value based on clock rate and passed interval
 cmp_value = (uint64_t) Chip_Clock_GetSystemClockRate() * (uint64_t) us / 1000000;
 // disable timer during configuration
 Chip_RIT_Disable(LPC_RITIMER);
 RIT_count = count;
 // enable automatic clear on when compare value==timer value
 // this makes interrupts trigger periodically
 Chip_RIT_EnableCompClear(LPC_RITIMER);
 // reset the counter
 Chip_RIT_SetCounter(LPC_RITIMER, 0);
 Chip_RIT_SetCompareValue(LPC_RITIMER, cmp_value);
 // start counting
 Chip_RIT_Enable(LPC_RITIMER);
 // Enable the interrupt signal in NVIC (the interrupt controller)
 NVIC_EnableIRQ(RITIMER_IRQn);
 // wait for ISR to tell that we're done
 if(xSemaphoreTake(sbRIT, portMAX_DELAY) == pdTRUE) {
 // Disable the interrupt signal in NVIC (the interrupt controller)
 NVIC_DisableIRQ(RITIMER_IRQn);
 }
 else {
 // unexpected error
 }
}
void SCT_Init(void) {

	Chip_SCT_Init(LPC_SCT0);
	Chip_SWM_MovablePortPinAssign(SWM_SCT0_OUT0_O, 0, 10);
	DEBUGOUT("SCT_Init \r\n");
	LPC_SCT0->CONFIG |= (1 << 17);              // two 16-bit timers, auto limit
	LPC_SCT0->CTRL_L |= (72 - 1) << 5; // set prescaler, SCTimer/PWM clock = 1 MHz
	LPC_SCT0->MATCHREL[0].L = 2000; // match 0 @ 1000/1MHz = 1 msec (1 kHz PWM freq)
	LPC_SCT0->MATCHREL[1].L = 1500; // match 1 used for duty cycle (in 10 steps)

	LPC_SCT0->EVENT[0].STATE = 0xFFFFFFFF;      // event 0 happens in all states
	LPC_SCT0->EVENT[0].CTRL = (1 << 12);               // match 0 condition only

	LPC_SCT0->EVENT[1].STATE = 0xFFFFFFFF;      // event 1 happens in all states
	LPC_SCT0->EVENT[1].CTRL = (1 << 0) | (1 << 12);    // match 1 condition only

	LPC_SCT0->OUT[0].SET = (1 << 0);             // event 0 will set   SCTx_OUT0
	LPC_SCT0->OUT[0].CLR = (1 << 1);             // event 1 will clear SCTx_OUT0

	LPC_SCT0->CTRL_L &= ~(1 << 2);  // unhalt it by clearing bit 2 of CTRL reg }
}

static void prvSetupHardware(void) {
	SystemCoreClockUpdate();
	Board_Init();
	SCT_Init();
	/* Initial LED0 state is off */
	Board_LED_Set(0, false);
}

void sendData(vector<string> lineParts) {
	DigitalIoPin pen(0, 10, false, true, true);
	string inputCommand = lineParts[0];
	float coordinates[2];
	int speed = 0;
	int penPos = 0;
	int xTicks = 0;
	int yTicks = 0;

	if (inputCommand == "G1") { //Go to position. Coordinates are in millimetres. The last parameter tells is coordinates are relative or
		lineParts[1].erase(0, 1);	//absolute (A0 = absolute, A1 = relative)
		lineParts[2].erase(0, 1);
		coordinates[0] = stof(lineParts[1]);
		coordinates[1] = stof(lineParts[2]);

		bool dirX = coordinates[0] > LastX ? false : true;
		bool dirY = coordinates[1] > LastY ? false : true;
		xTicks = (coordinates[0] - LastX);
		yTicks = (coordinates[1] - LastY);
		RIT_start(xTicks,1);
		if(xSemaphoreTake(goDone,portMAX_DELAY));
		bres(xTicks, yTicks);
		LastX = coordinates[0];
		LastY = coordinates[1];

	} else if (inputCommand == "M1") {//Set pen position (control servo). Range 0 - 255. Remember that servo pulse (high) length must be
		DEBUGOUT("M1 CALLED \r\n");
		vTaskDelay(10);
		DEBUGOUT("%d \r\n", stoi(lineParts[1]));
//		lineParts[1].erase(0, 1);// between 1 - 2 ms and pulse frequency is 50 Hz.
//		fDutyCycl = stoi(lineParts[1])/255;
		if (stoi(lineParts[1]) != 130) {
			fDutyCycl = 1000;
		} else {
			fDutyCycl = 1500;
		}
	}
}

void PenTask(void * pvParameters) {
	while (1) {
		vTaskDelay(100);
		LPC_SCT0->MATCHREL[1].L = fDutyCycl;
	}
}

static void getData(void *pvParameters) {
	int r;
	string line;
	calibrate();
	while (1) {
		r = Board_UARTGetChar();
		if (r != EOF) {
			if (r == '\n') {
				vTaskDelay(configTICK_RATE_HZ / 50);

				sendData(parser.parse(line));

				line.clear();
				Board_UARTPutSTR("OK\n");

			} else {
				line.push_back(r);
			}
		}
	}
}
/* the following is required if runtime statistics are to be collected */
extern "C" {

void vConfigureTimerForRunTimeStats(void) {
	Chip_SCT_Init(LPC_SCTSMALL1);
	LPC_SCTSMALL1->CONFIG = SCT_CONFIG_32BIT_COUNTER;
	LPC_SCTSMALL1->CTRL_U = SCT_CTRL_PRE_L(255) | SCT_CTRL_CLRCTR_L; // set prescaler to 256 (255 + 1), and start timer
}

}

int main(void) {
	prvSetupHardware();
	Chip_RIT_Init(LPC_RITIMER);
	NVIC_SetPriority(RITIMER_IRQn, configMAX_SYSCALL_INTERRUPT_PRIORITY + 1);
	xMotorStop = xSemaphoreCreateBinary();
	yMotorStop = xSemaphoreCreateBinary();
	goDone = xSemaphoreCreateBinary();
	DigitalIoPin laser(0, 12, false, true, true);
	laser.write(false);
	X = new Motor(0, 27, 1, 3, 0, 0, 0, 28);
	Y = new Motor(0, 24, 0, 9, 0, 29, 1, 0);

	xTaskCreate(getData, "getData",
	configMINIMAL_STACK_SIZE * 9, NULL, (tskIDLE_PRIORITY + 2UL),
			(TaskHandle_t *) NULL);
	xTaskCreate(PenTask, "penTask",
	configMINIMAL_STACK_SIZE * 2, NULL, (tskIDLE_PRIORITY + 2UL),
			(TaskHandle_t *) NULL);
	/* Start the scheduler */
	vTaskStartScheduler();

	/* Should never arrive here */
	return 1;
}
